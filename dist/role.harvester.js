var roleUpgrader = require('role.upgrader');
var roleHarvester = {
    /** @param {Creep} creep **/
    run: function(creep) {
        if (creep.store.getFreeCapacity() > 0) {
            // –ù–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            var closestSource = creep.pos.findClosestByPath(FIND_SOURCES_ACTIVE);
            if (closestSource) {
                if (creep.harvest(closestSource) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(closestSource, { visualizePathStyle: { stroke: '#ffaa00' } });
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ–∏–º –Ω–∞ –º–µ—Å—Ç–µ
                creep.say('üîÑ');
                return null;
            }
        } else {
            var targets = creep.room.find(FIND_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&
                        structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                }
            });
            if (targets.length > 0) {
                if (creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0], { visualizePathStyle: { stroke: '#ffffff' } });
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏, –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ–∏–º –Ω–∞ –º–µ—Å—Ç–µ
                // roleUpgrader.run(creep);
                creep.say('Stay');
                return null;
            }
        }
    }
};

module.exports = roleHarvester;
